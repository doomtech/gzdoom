ACTOR Inventory native
{
	Defaults
	{
		Inventory.Amount (1)
		Inventory.MaxAmount (1)
		Inventory.UseSound ("misc/invuse")
		Inventory.PickupSound ("misc/i_pkup")
	}

	native action A_JumpIfNoAmmo(state label);
	native action A_CustomPunch(int damage, bool norandom = false, bool useammo = true, class<Actor> pufftype = "BulletPuff", float range = 0);
	native action A_FireBullets(float spread_xy, float spread_z, int numbullets, int damageperbullet, class<Actor> pufftype = "BulletPuff", bool useammo = true, float range = 0);
	native action A_FireCustomMissile(class<Actor> missiletype, float angle = 0, bool useammo = true, int spawnofs_xy = 0, float spawnheight = 0, bool aimatangle = false);
	native action A_RailAttack(int damage, int spawnofs_xy = 0, int useammo = true, color color1 = "", color color2 = "", bool silent = false, float maxdiff = 0, class<Actor> pufftype = "BulletPuff");
	native action A_Light(int extralight);
	native action A_Light0();
	native action A_Light1();
	native action A_Light2();
	native action A_LightInverse();
	native action A_WeaponReady();
	native action A_Lower();
	native action A_Raise();
	native action A_FirePistol();
	native action A_FireShotgun();
	native action A_FireShotgun2();
	native action A_OpenShotgun2();
	native action A_LoadShotgun2();
	native action A_CloseShotgun2();
	native action A_FireCGun();
	native action A_FireMissile();
	native action A_FirePlasma();
	native action A_FireRailgun();
	native action A_FireRailgunLeft();
	native action A_FireRailgunRight();
	native action A_RailWait();
	native action A_BFGsound();
	native action A_FireBFG();
	native action A_ReFire();
	native action A_ClearReFire();
	native action A_CheckReload();
	native action A_GunFlash();
	native action A_Saw(sound fullsound = "weapons/sawfull", sound hitsound = "weapons/sawhit", int damage = 2, class<Actor> pufftype = "BulletPuff");
	native action A_CheckForReload(int counter, state label, bool dontincrement = false);
	native action A_ResetReloadCounter();
	native action A_RestoreSpecialPosition();
	native action A_RestoreSpecialDoomThing();
	native action A_RestoreSpecialThing1();
	native action A_RestoreSpecialThing2();

	States
	{
	HideDoomish:
		TNT1 A 1050;
		TNT1 A 0 A_RestoreSpecialPosition;
		TNT1 A 1 A_RestoreSpecialDoomThing;
		Stop
	HideSpecial:
		ACLO E 1400;
		ACLO A 0 A_RestoreSpecialPosition;
		ACLO A 4 A_RestoreSpecialThing1;
		ACLO BABCBCDC 4;
		ACLO D 4 A_RestoreSpecialThing2;
		Stop
	Held:
		TNT1 A -1;
		Stop
	HoldAndDestroy:
		TNT1 A 1;
		Stop
	}
}

ACTOR Ammo : Inventory native
{
	Defaults
	{
		+INVENTORY.KEEPDEPLETED
		Inventory.PickupSound ("misc/ammo_pkup")
	}
}

ACTOR BackpackItem : Inventory native
{
}

ACTOR Armor : Inventory native
{
	Defaults
	{
		Inventory.PickupSound ("misc/armor_pkup")
	}
}

ACTOR BasicArmor : Armor native
{
	Defaults
	{
		+Inventory.KEEPDEPLETED
	}
}

ACTOR BasicArmorBonus : Armor native
{
	Defaults
	{
		+Inventory.AUTOACTIVATE
		+Inventory.ALWAYSPICKUP
		Inventory.MaxAmount (0)
		Armor.SavePercent (0.333333)
	}
}

ACTOR BasicArmorPickup : Armor native
{
	Defaults
	{
		+Inventory.AUTOACTIVATE
		Inventory.MaxAmount (0)
	}
}

ACTOR HexenArmor : Armor native
{
	Defaults
	{
		+Inventory.KEEPDEPLETED
		+Inventory.UNDROPPABLE
	}
}

ACTOR DehackedPickup : Inventory native
{
}

ACTOR FakeInventory : Inventory native
{
}

ACTOR CustomInventory : Inventory native
{
}

ACTOR Health : Inventory native
{
	Defaults
	{
		Inventory.Amount (1)
		Inventory.MaxAmount (0)
		Inventory.PickupSound ("misc/health_pkup")
	}
}

ACTOR HealthPickup : Inventory native
{
	Defaults
	{
		Inventory.DefMaxAmount ()
		+INVENTORY.INVBAR
	}
}

ACTOR Key : Inventory native
{
	Defaults
	{
		+INVENTORY.INTERHUBSTRIP
		Inventory.PickupSound ("misc/k_pkup")
	}
}

ACTOR PowerupGiver : Inventory native
{
	Defaults
	{
		Inventory.DefMaxAmount ()
		+INVENTORY.INVBAR
		+INVENTORY.FANCYPICKUPSOUND
		Inventory.PickupSound ("misc/p_pkup")
	}
}

ACTOR Powerup : Inventory native
{
}

ACTOR PowerInvulnerable : Powerup native
{
	Defaults
	{
		Powerup.Duration (-30)
		inventory.icon ("SPSHLD0")
	}
}

ACTOR PowerStrength : Powerup native
{
	Defaults
	{
		Powerup.Duration (1)
		Powerup.Color (255,0,0,0.5)
		+INVENTORY.HUBPOWER
	}
}

ACTOR PowerInvisibility : Powerup native
{
	Defaults
	{
		Powerup.Duration (-60)
	}
}

ACTOR PowerGhost : PowerInvisibility native
{
}

ACTOR PowerShadow : PowerInvisibility native
{
	Defaults
	{
		Powerup.Duration (-55)
		+INVENTORY.HUBPOWER
	}
}

ACTOR PowerIronFeet : Powerup native
{
	Defaults
	{
		Powerup.Duration (-60)
		Powerup.Color (0, 255, 0, 0.125)
	}
}

ACTOR PowerMask : PowerIronFeet native
{
	Defaults
	{
		Powerup.Duration (-80)
		Powerup.Color (0,0,0,0)
		+INVENTORY.HUBPOWER
		Inventory.Icon ("I_MASK")
	}
}

ACTOR PowerLightAmp : Powerup native
{
	Defaults
	{
		Powerup.Duration (-120)
	}
}

ACTOR PowerTorch : PowerLightAmp native
{
}

ACTOR PowerFlight : Powerup native
{
	Defaults
	{
		Powerup.Duration (-60)
		+INVENTORY.HUBPOWER
	}
}

ACTOR PowerWeaponLevel2 : Powerup native
{
	Defaults
	{
		Powerup.Duration (-40)
		Inventory.Icon ("SPINBK0")
	}
}

ACTOR PowerSpeed : Powerup native
{
	Defaults
	{
		Powerup.Duration (-45)
		Speed (1.5)
		Inventory.Icon ("SPBOOT0")
	}
}

// Player Speed Trail (used by the Speed Powerup) ----------------------------

ACTOR PlayerSpeedTrail native
{
	Defaults
	{
		+NOBLOCKMAP
		+NOGRAVITY
		Alpha (0.6)
		RenderStyle ("Translucent")
	}
}

ACTOR PowerMinotaur : Powerup native
{
	Defaults
	{
		Powerup.Duration (-25)
		Inventory.Icon ("SPMINO0")
	}
}

ACTOR PowerTargeter : Powerup native
{
	Defaults
	{
		Powerup.Duration (-160)
		+INVENTORY.HUBPOWER
	}

	States
	{
	Targeter:
		TRGT A -1;
		Stop
		TRGT B -1;
		Stop
		TRGT C -1;
		Stop
	}
}

ACTOR PowerFrightener : Powerup native
{
	Defaults
	{
		Powerup.Duration (-60)
	}
}

ACTOR PowerScanner : Powerup native
{
	Defaults
	{
		Powerup.Duration (-80)
		+INVENTORY.HUBPOWER
	}
}

ACTOR PowerTimeFreezer : Powerup native
{
	Defaults
	{
		Powerup.Duration (-12)
	}
}

ACTOR PowerDamage : Powerup native
{
	Defaults
	{
		Powerup.Duration (-25)
	}
}

ACTOR PowerProtection : Powerup native
{
	Defaults
	{
		Powerup.Duration (-25)
	}
}

ACTOR PowerDrain : Powerup native
{
	Defaults
	{
		Powerup.Duration (-60)
	}
}

ACTOR PowerRegeneration : Powerup native
{
	Defaults
	{
		Powerup.Duration (-120)
	}
}

ACTOR PowerHighJump : Powerup native
{
}

ACTOR PowerMorph : Powerup native
{
	Defaults
	{
		Powerup.Duration (-40)
	}
}

ACTOR MapRevealer : Inventory native
{
}

ACTOR PuzzleItem : Inventory native
{
	Defaults
	{
		+NOGRAVITY
		+INVENTORY.INVBAR
		Inventory.DefMaxAmount ()
		Inventory.UseSound ("PuzzleSuccess")
		Inventory.PickupSound ("misc/i_pkup")
	}
}

ACTOR Weapon : Inventory native
{
	Defaults
	{
		Inventory.PickupSound ("misc/w_pkup")
		Weapon.DefaultKickback ()
	}

	States
	{
	LightDone:
		SHTG E 0 A_Light0;
		Stop
	}
}

ACTOR WeaponGiver : Weapon native
{
}

ACTOR WeaponHolder : Inventory native
{
	Defaults
	{
		+NOBLOCKMAP
		+NOSECTOR
		+INVENTORY.UNDROPPABLE
	}
}

ACTOR WeaponPiece : Inventory native
{
}

