ACTOR Actor native //: Thinker
{
	Scale 1
	Health 1000
	Reactiontime 8
	Radius 20
	Height 16
	Mass 100
	RenderStyle Normal
	Alpha 1
	MinMissileChance 200
	MeleeRange 44
	MaxDropoffHeight 24
	MaxStepHeight 24
	BounceFactor 0.7
	WallBounceFactor 0.75
	BounceCount -1
	FloatSpeed 4
	Gravity 1

	action native A_MonsterRail();
	action native A_BFGSpray(optional class<Actor> spraytype, optional int numrays, optional int damagecount);
	action native A_Pain();
	action native A_NoBlocking();
	action native A_XScream();
	action native A_Look();
	action native A_Chase(optional state melee, optional state missile, optional int flags);
	action native A_FaceTarget();
	action native A_PosAttack();
	action native A_Scream();
	action native A_SPosAttack();
	action native A_SPosAttackUseAtkSound();
	action native A_VileChase();
	action native A_VileStart();
	action native A_VileTarget();
	action native A_VileAttack();	
	action native A_StartFire();
	action native A_Fire();
	action native A_FireCrackle();
	action native A_Tracer();
	action native A_SkelWhoosh();
	action native A_SkelFist();
	action native A_SkelMissile();
	action native A_FatRaise();
	action native A_FatAttack1(optional class<Actor> spawntype);
	action native A_FatAttack2(optional class<Actor> spawntype);
	action native A_FatAttack3(optional class<Actor> spawntype);
	action native A_BossDeath();
	action native A_CPosAttack();
	action native A_CPosRefire();
	action native A_TroopAttack();
	action native A_SargAttack();
	action native A_HeadAttack();
	action native A_BruisAttack();
	action native A_SkullAttack(optional float speed);
	action native A_Metal();
	action native A_SpidRefire();
	action native A_BabyMetal();
	action native A_BspiAttack();
	action native A_Hoof();
	action native A_CyberAttack();
	action native A_PainAttack(optional class<Actor> spawntype);
	action native A_DualPainAttack(optional class<Actor> spawntype);
	action native A_PainDie(optional class<Actor> spawntype);
	action native A_KeenDie();
	action native A_BrainPain();
	action native A_BrainScream();
	action native A_BrainDie();
	action native A_BrainAwake();
	action native A_BrainSpit(optional class<Actor> spawntype);
	action native A_SpawnSound();
	action native A_SpawnFly(optional class<Actor> spawntype);
	action native A_BrainExplode();
	action native A_Die(optional name damagetype);
	action native A_Detonate();
	action native A_Mushroom(optional class<Actor> spawntype, optional int numspawns);

	action native A_SetFloorClip();
	action native A_UnSetFloorClip();
	action native A_HideThing();
	action native A_UnHideThing();
	action native A_SetInvulnerable();
	action native A_UnSetInvulnerable();
	action native A_SetReflective();
	action native A_UnSetReflective();
	action native A_SetReflectiveInvulnerable();
	action native A_UnSetReflectiveInvulnerable();
	action native A_SetShootable();
	action native A_UnSetShootable();
	action native A_NoGravity();
	action native A_Gravity();
	action native A_LowGravity();
	action native A_SetGravity(float gravity);
	action native A_Fall();
	action native A_SetSolid();
	action native A_UnsetSolid();
	action native A_SetFloat();
	action native A_UnsetFloat();

	action native A_M_Saw();

	action native A_ScreamAndUnblock();
	action native A_ActiveAndUnblock();
	action native A_ActiveSound();

	action native A_FastChase();
	action native A_FreezeDeath();
	action native A_FreezeDeathChunks();
	action native A_GenericFreezeDeath();
	action native A_IceGuyDie();
	action native A_CentaurDefend();
	action native A_BishopMissileWeave();
	action native A_CStaffMissileSlither();
	action native A_PlayerScream();
	action native A_SkullPop(optional class<Actor> skulltype);
	action native A_CheckPlayerDone();

	action native A_Wander();
	action native A_Look2();
	action native A_TossGib();
	action native A_SentinelBob();
	action native A_SentinelRefire();
	action native A_Tracer2();
	action native A_SetShadow();
	action native A_ClearShadow();
	action native A_GetHurt();
	action native A_TurretLook();
	action native A_KlaxonBlare();
	action native A_Countdown();
	action native A_AlertMonsters();
	action native A_ClearSoundTarget();
	action native A_FireAssaultGun();
	action native A_CheckTerrain();

	action native A_MissileAttack();
	action native A_MeleeAttack();
	action native A_ComboAttack();
	action native A_BulletAttack();
	action native A_PlaySound(sound whattoplay);
	action native A_PlayWeaponSound(sound whattoplay);
	action native A_FLoopActiveSound();
	action native A_LoopActiveSound();
	action native A_StopSound();
	action native A_PlaySoundEx(sound whattoplay, coerce name slot, optional bool looping, optional int attenuation);
	action native A_StopSoundEx(coerce name slot);
	action native A_SeekerMissile(int threshold, int turnmax);
	action native A_Jump(int chance, state label, ...);
	action native A_CustomMissile(class<Actor> missiletype, float spawnheight, int spawnofs_xy, optional float angle, optional int flags, optional float pitch);
	action native A_CustomBulletAttack(float spread_xy, float spread_z, int	numbullets, int damageperbullet, optional class<Actor> pufftype, optional float range, optional bool aimfacing);
	action native A_CustomRailgun(int damage, optional int spawnofs_xy, optional color color1, optional color color2, optional bool silent, optional bool aim, optional float maxdiff, optional class<Actor> pufftype);
	action native A_JumpIfHealthLower(int health, state label);
	action native A_JumpIfCloser(float distance, state label);
	action native A_JumpIfInventory(class<Inventory> itemtype, int itemamount, state label);
	action native A_GiveInventory(class<Inventory> itemtype, optional int amount);
	action native A_TakeInventory(class<Inventory> itemtype, optional int amount);
	action native A_SpawnItem(class<Actor> itemtype, optional float distance, optional float zheight, optional evalnot bool useammo, optional bool transfer_translation);
	action native A_SpawnItemEx(class<Actor> itemtype, optional float xofs, optional float yofs, optional float zofs, optional float xmom, optional float ymom, optional float zmom, optional float angle, optional int flags, optional int chance);
	action native A_Print(string whattoprint, optional float time, optional string fontname);
	action native A_SetTranslucent(float alpha, optional int style);
	action native A_FadeIn(optional float reduce);
	action native A_FadeOut(optional float reduce);
	action native A_SpawnDebris(class<Actor> spawntype, optional bool transfer_translation, optional float mult_h, optional float mult_v);
	action native A_CheckSight(state label);
	action native A_ExtChase(bool usemelee, bool usemissile, optional evalnot bool playactive, optional bool nightmarefast);
	action native A_DropInventory(class<Inventory> itemtype);
	action native A_SetBlend(color color1, float alpha, int tics, optional color color2);
	action native A_ChangeFlag(string flagname, bool value);
	action native A_JumpIf(bool expression, state label);
	action native A_KillMaster();
	action native A_KillChildren();
	action native A_CheckFloor(state label);
	action native A_PlayerSkinCheck(state label);
	action native A_BasicAttack(int meleedamage, sound meleesound, class<actor> missiletype, float missileheight);
	action native A_ThrowGrenade(class<Actor> itemtype, optional float zheight, optional float xymom, optional float zmom, optional evalnot bool useammo);

	action native A_Recoil(float xymom);
	action native A_JumpIfInTargetInventory(class<Inventory> itemtype, int amount, state label);
	action native A_GiveToTarget(class<Inventory> itemtype, optional int amount);
	action native A_TakeFromTarget(class<Inventory> itemtype, optional int amount);
	action native A_CountdownArg(int argnum);
	action native A_CustomMeleeAttack(int damage, optional sound meleesound, optional sound misssound, optional name damagetype, optional evalnot bool bleed);
	action native A_CustomComboAttack(class<Actor> missiletype, float spawnheight, int damage, optional sound meleesound, optional name damagetype, optional evalnot bool bleed);
	action native A_Burst(class<Actor> chunktype);
	action native A_RadiusThrust(optional int force, optional int distance, optional evalnot bool affectsource);
	action native A_Explode(optional int damage, optional int distance, optional evalnot bool hurtsource, optional bool alert);
	action native A_Stop();
	action native A_Respawn(optional evalnot bool fog);
	action native A_BarrelDestroy();
	action native A_QueueCorpse();
	action native A_DeQueueCorpse();
	action native A_LookEx(optional int flags, optional float minseedist, optional float maxseedist, optional float maxheardist, optional float fov, optional state label);
	action native A_ClearTarget();
	action native A_JumpIfTargetInLOS (state label, optional float fov, optional bool projectiletarget);
	action native A_DamageMaster(int amount, optional name damagetype);
	action native A_DamageChildren(int amount, optional name damagetype);
	action native A_SelectWeapon(class<Weapon> whichweapon);
	action native A_Punch();
	action native A_Feathers();
	action native A_ClassBossHealth();
	action native A_ShootGun();
	action native A_RocketInFlight();
	action native A_Bang4Cloud();
	action native A_DropFire();
	action native A_GiveQuestItem(int itemno);
	action native A_RemoveForcefield();
	action native A_DropWeaponPieces(class<Actor> p1, class<Actor> p2, class<Actor> p3);
	action native A_PigPain ();

	States
	{
	Spawn:
		TNT1 A -1
		Stop
	Null:
		TNT1 A 1
		Stop
	GenericFreezeDeath:
		// Generic freeze death frames. Woo!
		"----" A 5 A_GenericFreezeDeath
		"----" A 1 A_FreezeDeathChunks
		Wait
	}
}




