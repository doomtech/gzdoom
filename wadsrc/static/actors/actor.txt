ACTOR Actor native
{
	DefaultProperties
	{
		Scale (1)
		Health (1000)
		Reactiontime (8)
		Radius (20)
		Height (16)
		Mass (100)
		RenderStyle ("Normal")
		Alpha (1)
		MinMissileChance (200)
		MeleeRange (44)
		MaxDropoffHeight (24)
		MaxStepHeight (24)
		BounceFactor (0.7)
		WallBounceFactor (0.75)
		BounceCount (-1)
		FloatSpeed (4)
		Gravity (1)
	}
	// Variables for the expression evaluator
	// NOTE: fixed_t and angle_t are only used here to ensure proper conversion
	// Internally they are handled as floats.
	// Variables must be native.
	native fixed_t alpha;
	native angle_t angle;
	native int args[5];
	native fixed_t ceilingz;
	native fixed_t floorz;
	native int health;
	native angle_t pitch;
	native int special;
	native int tid;
	native int TIDtoHate;
	native int waterlevel;
	native fixed_t x;
	native fixed_t y;
	native fixed_t z;
	native fixed_t momx;
	native fixed_t momy;
	native fixed_t momz;

	native action A_MonsterRail();
	native action A_BFGSpray(class<Actor> spraytype = "BFGExtra", int numrays = 40, int damagecount = 15);
	native action A_Pain();
	native action A_NoBlocking();
	native action A_XScream();
	native action A_Look();
	native action A_Chase(state melee = "*", state missile = "none", int flags = 0);
	native action A_FaceTarget();
	native action A_PosAttack();
	native action A_Scream();
	native action A_SPosAttack();
	native action A_SPosAttackUseAtkSound();
	native action A_VileChase();
	native action A_VileStart();
	native action A_VileTarget(class<Actor> fire = "ArchvileFire");
	native action A_VileAttack();	
	native action A_StartFire();
	native action A_Fire(float spawnheight = 0);
	native action A_FireCrackle();
	native action A_Tracer();
	native action A_SkelWhoosh();
	native action A_SkelFist();
	native action A_SkelMissile();
	native action A_FatRaise();
	native action A_FatAttack1(class<Actor> spawntype = "FatShot");
	native action A_FatAttack2(class<Actor> spawntype = "FatShot");
	native action A_FatAttack3(class<Actor> spawntype = "FatShot");
	native action A_BossDeath();
	native action A_CPosAttack();
	native action A_CPosRefire();
	native action A_TroopAttack();
	native action A_SargAttack();
	native action A_HeadAttack();
	native action A_BruisAttack();
	native action A_SkullAttack(float speed = 20);
	native action A_Metal();
	native action A_SpidRefire();
	native action A_BabyMetal();
	native action A_BspiAttack();
	native action A_Hoof();
	native action A_CyberAttack();
	native action A_PainAttack(class<Actor> spawntype = "LostSoul");
	native action A_DualPainAttack(class<Actor> spawntype = "LostSoul");
	native action A_PainDie(class<Actor> spawntype = "LostSoul");
	native action A_KeenDie(int doortag = 666);
	native action A_BrainPain();
	native action A_BrainScream();
	native action A_BrainDie();
	native action A_BrainAwake();
	native action A_BrainSpit(class<Actor> spawntype = "none");	// needs special treatment for default
	native action A_SpawnSound();
	native action A_SpawnFly(class<Actor> spawntype = "none");	// needs special treatment for default
	native action A_BrainExplode();
	native action A_Die(name damagetype = "none");
	native action A_Detonate();
	native action A_Mushroom(class<Actor> spawntype = "FatShot", int numspawns = 0);
	native action A_CallSpecial(int special, int arg1=0, int arg2=0, int arg3=0, int arg4=0, int arg5=0);
	native action A_SetFloorClip();
	native action A_UnSetFloorClip();
	native action A_HideThing();
	native action A_UnHideThing();
	native action A_SetInvulnerable();
	native action A_UnSetInvulnerable();
	native action A_SetReflective();
	native action A_UnSetReflective();
	native action A_SetReflectiveInvulnerable();
	native action A_UnSetReflectiveInvulnerable();
	native action A_SetShootable();
	native action A_UnSetShootable();
	native action A_NoGravity();
	native action A_Gravity();
	native action A_LowGravity();
	native action A_SetGravity(float gravity);
	native action A_Fall();
	native action A_SetSolid();
	native action A_UnsetSolid();
	native action A_SetFloat();
	native action A_UnsetFloat();
	native action A_M_Saw();
	native action A_ScreamAndUnblock();
	native action A_ActiveAndUnblock();
	native action A_ActiveSound();
	native action A_FastChase();
	native action A_FreezeDeath();
	native action A_FreezeDeathChunks();
	native action A_GenericFreezeDeath();
	native action A_IceGuyDie();
	native action A_CentaurDefend();
	native action A_BishopMissileWeave();
	native action A_CStaffMissileSlither();
	native action A_PlayerScream();
	native action A_SkullPop(class<Actor> skulltype = "BloodySkull");
	native action A_CheckPlayerDone();
	native action A_Wander();
	native action A_Look2();
	native action A_TossGib();
	native action A_SentinelBob();
	native action A_SentinelRefire();
	native action A_Tracer2();
	native action A_SetShadow();
	native action A_ClearShadow();
	native action A_GetHurt();
	native action A_TurretLook();
	native action A_KlaxonBlare();
	native action A_Countdown();
	native action A_AlertMonsters();
	native action A_ClearSoundTarget();
	native action A_FireAssaultGun();
	native action A_CheckTerrain();
	native action A_MissileAttack();
	native action A_MeleeAttack();
	native action A_ComboAttack();
	native action A_BulletAttack();
	native action A_PlaySound(sound whattoplay);
	native action A_PlayWeaponSound(sound whattoplay);
	native action A_FLoopActiveSound();
	native action A_LoopActiveSound();
	native action A_StopSound();
	native action A_PlaySoundEx(sound whattoplay, name slot, bool looping = false, int attenuation = 0);
	native action A_StopSoundEx(name slot);
	native action A_SeekerMissile(int threshold, int turnmax);
	native action A_Jump(int chance, state label, ...);
	native action A_CustomMissile(class<Actor> missiletype, float spawnheight = 32, int spawnofs_xy = 0, float angle = 0, int flags = 0, float pitch = 0);
	native action A_CustomBulletAttack(float spread_xy, float spread_z, int	numbullets, int damageperbullet, class<Actor> pufftype = "BulletPuff", float range = 0, bool aimfacing = false);
	native action A_CustomRailgun(int damage, int spawnofs_xy = 0, color color1 = "", color color2 = "", bool silent = false, bool aim = false, float maxdiff = 0, class<Actor> pufftype = "BulletPuff");
	native action A_JumpIfHealthLower(int health, state label);
	native action A_JumpIfCloser(float distance, state label);
	native action A_JumpIfInventory(class<Inventory> itemtype, int itemamount, state label);
	native action A_GiveInventory(class<Inventory> itemtype, int amount = 0);
	native action A_TakeInventory(class<Inventory> itemtype, int amount = 0);
	native action A_SpawnItem(class<Actor> itemtype, float distance = 0, float zheight = 0, bool useammo = true, bool transfer_translation = false);
	native action A_SpawnItemEx(class<Actor> itemtype, float xofs = 0, float yofs = 0, float zofs = 0, float xmom = 0, float ymom = 0, float zmom = 0, float angle = 0, int flags = 0, int failchance = 0);
	native action A_Print(string whattoprint, float time = 0, string fontname = "");
	native action A_SetTranslucent(float alpha, int style = 0);
	native action A_FadeIn(float reduce = 0.1);
	native action A_FadeOut(float reduce = 0.1);
	native action A_SpawnDebris(class<Actor> spawntype, bool transfer_translation = false, float mult_h = 1, float mult_v = 1);
	native action A_CheckSight(state label);
	native action A_ExtChase(bool usemelee, bool usemissile, bool playactive = true, bool nightmarefast = false);
	native action A_DropInventory(class<Inventory> itemtype);
	native action A_SetBlend(color color1, float alpha, int tics, color color2 = "");
	native action A_ChangeFlag(string flagname, bool value);
	native action A_JumpIf(bool expression, state label);
	native action A_RemoveMaster();
	native action A_RemoveChildren(bool removeall = false);
	native action A_KillMaster();
	native action A_KillChildren();
	native action A_KillSiblings();
	native action A_CheckFloor(state label);
	native action A_PlayerSkinCheck(state label);
	native action A_BasicAttack(int meleedamage, sound meleesound, class<actor> missiletype, float missileheight);
	native action A_ThrowGrenade(class<Actor> itemtype, float zheight = 0, float xymom = 0, float zmom = 0, bool useammo = true);
	native action A_Recoil(float xymom);
	native action A_JumpIfInTargetInventory(class<Inventory> itemtype, int amount, state label);
	native action A_GiveToTarget(class<Inventory> itemtype, int amount = 0);
	native action A_TakeFromTarget(class<Inventory> itemtype, int amount = 0);
	native action A_CountdownArg(int argnum);
	native action A_CustomMeleeAttack(int damage, sound meleesound = "", sound misssound = "", name damagetype = "none", bool bleed = true);
	native action A_CustomComboAttack(class<Actor> missiletype, float spawnheight, int damage, sound meleesound = "", name damagetype = "none", bool bleed = true);
	native action A_Burst(class<Actor> chunktype);
	native action A_RadiusThrust(int force = 128, int distance = -1, bool affectsource = true);
	native action A_Explode(int damage = -1, int distance = -1, bool hurtsource = true, bool alert = false);
	native action A_Stop();
	native action A_Respawn(bool fog = true);
	native action A_BarrelDestroy();
	native action A_QueueCorpse();
	native action A_DeQueueCorpse();
	native action A_LookEx(int flags = 0, float minseedist = 0, float maxseedist = 0, float maxheardist = 0, float fov = 0, state label = "");
	native action A_ClearTarget();
	native action A_JumpIfTargetInLOS (state label, float fov = 0, bool projectiletarget = false);
	native action A_DamageMaster(int amount, name damagetype = "none");
	native action A_DamageChildren(int amount, name damagetype = "none");
	native action A_DamageSiblings(int amount, name damagetype = "none");
	native action A_SelectWeapon(class<Weapon> whichweapon);
	native action A_Punch();
	native action A_Feathers();
	native action A_ClassBossHealth();
	native action A_ShootGun();
	native action A_RocketInFlight();
	native action A_Bang4Cloud();
	native action A_DropFire();
	native action A_GiveQuestItem(int itemno);
	native action A_RemoveForcefield();
	native action A_DropWeaponPieces(class<Actor> p1, class<Actor> p2, class<Actor> p3);
	native action A_PigPain ();

	States
	{
	Spawn:
		TNT1 A -1;
		Stop
	Null:
		TNT1 A 1;
		Stop
	GenericFreezeDeath:
		// Generic freeze death frames. Woo!;
		"----" A 5 A_GenericFreezeDeath;
		"----" A 1 A_FreezeDeathChunks;
		Wait
	}
}




