 State 0:
          main ::= * translation_unit
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
     (12) translation_unit ::= *
          translation_unit ::= * external_declaration
          external_declaration ::= * define_statement
          external_declaration ::= * include_statement
          external_declaration ::= * print_statement
          external_declaration ::= * enum_statement
          external_declaration ::= * linetype_declaration
          external_declaration ::= * boom_declaration
          external_declaration ::= * special_declaration
          print_statement ::= * PRINT LPAREN print_list RPAREN
          define_statement ::= * DEFINE SYM LPAREN exp RPAREN
          include_statement ::= * INCLUDE STRING
          enum_statement ::= * enum_open enum_list RBRACE
          enum_open ::= * ENUM LBRACE
          special_declaration ::= * SPECIAL special_list SEMICOLON
          linetype_declaration ::= * exp EQUALS exp COMMA exp LPAREN special_args RPAREN
          linetype_declaration ::= * exp EQUALS exp COMMA SYM LPAREN special_args RPAREN
          boom_declaration ::= * LBRACKET exp RBRACKET LPAREN exp COMMA exp RPAREN LBRACE boom_body RBRACE

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                         PRINT shift  127
                        DEFINE shift  102
                       INCLUDE shift  108
                          ENUM shift  119
                       SPECIAL shift  5
                      LBRACKET shift  22
                           exp shift  65
                          main accept
              translation_unit shift  163
          external_declaration shift  160
              define_statement shift  149
             include_statement shift  148
               print_statement shift  147
                enum_statement shift  146
          linetype_declaration shift  145
              boom_declaration shift  144
           special_declaration shift  143
                     enum_open shift  14
                     {default} reduce 12

State 1:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
     (22) print_list ::= *
          print_list ::= * print_item
          print_list ::= * print_item COMMA print_list
          print_list ::= print_item COMMA * print_list
          print_item ::= * STRING
          print_item ::= * exp
          print_item ::= * ENDL

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                        STRING shift  140
                          ENDL shift  137
                           exp shift  88
                    print_list shift  141
                    print_item shift  104
                     {default} reduce 22

State 2:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          print_statement ::= PRINT LPAREN * print_list RPAREN
     (22) print_list ::= *
          print_list ::= * print_item
          print_list ::= * print_item COMMA print_list
          print_item ::= * STRING
          print_item ::= * exp
          print_item ::= * ENDL

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                        STRING shift  140
                          ENDL shift  137
                           exp shift  88
                    print_list shift  110
                    print_item shift  104
                     {default} reduce 22

State 3:
          boom_declaration ::= LBRACKET exp RBRACKET LPAREN exp COMMA exp RPAREN LBRACE * boom_body RBRACE
     (48) boom_body ::= *
          boom_body ::= * boom_line boom_body
          boom_line ::= * boom_selector boom_op boom_args
          boom_selector ::= * FLAGS
          boom_selector ::= * ARG2
          boom_selector ::= * ARG3
          boom_selector ::= * ARG4
          boom_selector ::= * ARG5

                         FLAGS shift  168
                          ARG2 shift  169
                          ARG3 shift  170
                          ARG4 shift  171
                          ARG5 shift  172
                 boom_selector shift  55
                     boom_line shift  4
                     boom_body shift  101
                     {default} reduce 48

State 4:
     (48) boom_body ::= *
          boom_body ::= * boom_line boom_body
          boom_body ::= boom_line * boom_body
          boom_line ::= * boom_selector boom_op boom_args
          boom_selector ::= * FLAGS
          boom_selector ::= * ARG2
          boom_selector ::= * ARG3
          boom_selector ::= * ARG4
          boom_selector ::= * ARG5

                         FLAGS shift  168
                          ARG2 shift  169
                          ARG3 shift  170
                          ARG4 shift  171
                          ARG5 shift  172
                 boom_selector shift  55
                     boom_line shift  4
                     boom_body shift  152
                     {default} reduce 48

State 5:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_declaration ::= SPECIAL * special_list SEMICOLON
          special_list ::= * special_def
          special_list ::= * special_list COMMA special_def
          special_def ::= * exp COLON SYM LPAREN maybe_argcount RPAREN
          special_def ::= * exp COLON SYMNUM LPAREN maybe_argcount RPAREN

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  66
                  special_list shift  100
                   special_def shift  139

State 6:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          boom_args ::= exp LBRACKET * arg_list RBRACKET
          arg_list ::= * list_val
          arg_list ::= * list_val COMMA arg_list
          list_val ::= * exp COLON exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  80
                      list_val shift  128
                      arg_list shift  107

State 7:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          arg_list ::= * list_val
          arg_list ::= * list_val COMMA arg_list
          arg_list ::= list_val COMMA * arg_list
          list_val ::= * exp COLON exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  80
                      list_val shift  128
                      arg_list shift  164

State 8:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          linetype_declaration ::= exp EQUALS exp COMMA SYM LPAREN * special_args RPAREN
     (63) special_args ::= *
          special_args ::= * TAG
          special_args ::= * TAG COMMA exp
          special_args ::= * TAG COMMA exp COMMA exp
          special_args ::= * TAG COMMA exp COMMA exp COMMA exp
          special_args ::= * TAG COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= * TAG COMMA TAG
          special_args ::= * TAG COMMA TAG COMMA exp
          special_args ::= * TAG COMMA TAG COMMA exp COMMA exp
          special_args ::= * TAG COMMA TAG COMMA exp COMMA exp COMMA exp
          special_args ::= * LINEID
          special_args ::= * LINEID COMMA exp
          special_args ::= * LINEID COMMA exp COMMA exp
          special_args ::= * LINEID COMMA exp COMMA exp COMMA exp
          special_args ::= * LINEID COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= * exp
          special_args ::= * exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= * exp COMMA TAG
          special_args ::= * exp COMMA TAG COMMA exp
          special_args ::= * exp COMMA TAG COMMA exp COMMA exp
          special_args ::= * exp COMMA TAG COMMA exp COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA TAG
          special_args ::= * exp COMMA exp COMMA TAG COMMA exp
          special_args ::= * exp COMMA exp COMMA TAG COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA TAG
          special_args ::= * exp COMMA exp COMMA exp COMMA TAG COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA exp COMMA TAG

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           TAG shift  114
                        LINEID shift  126
                           exp shift  77
                  special_args shift  106
                     {default} reduce 63

State 9:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          linetype_declaration ::= exp EQUALS exp COMMA exp LPAREN * special_args RPAREN
     (63) special_args ::= *
          special_args ::= * TAG
          special_args ::= * TAG COMMA exp
          special_args ::= * TAG COMMA exp COMMA exp
          special_args ::= * TAG COMMA exp COMMA exp COMMA exp
          special_args ::= * TAG COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= * TAG COMMA TAG
          special_args ::= * TAG COMMA TAG COMMA exp
          special_args ::= * TAG COMMA TAG COMMA exp COMMA exp
          special_args ::= * TAG COMMA TAG COMMA exp COMMA exp COMMA exp
          special_args ::= * LINEID
          special_args ::= * LINEID COMMA exp
          special_args ::= * LINEID COMMA exp COMMA exp
          special_args ::= * LINEID COMMA exp COMMA exp COMMA exp
          special_args ::= * LINEID COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= * exp
          special_args ::= * exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= * exp COMMA TAG
          special_args ::= * exp COMMA TAG COMMA exp
          special_args ::= * exp COMMA TAG COMMA exp COMMA exp
          special_args ::= * exp COMMA TAG COMMA exp COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA TAG
          special_args ::= * exp COMMA exp COMMA TAG COMMA exp
          special_args ::= * exp COMMA exp COMMA TAG COMMA exp COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA TAG
          special_args ::= * exp COMMA exp COMMA exp COMMA TAG COMMA exp
          special_args ::= * exp COMMA exp COMMA exp COMMA exp COMMA TAG

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           TAG shift  114
                        LINEID shift  126
                           exp shift  77
                  special_args shift  117
                     {default} reduce 63

State 10:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          boom_line ::= boom_selector boom_op * boom_args
          boom_args ::= * exp
          boom_args ::= * exp LBRACKET arg_list RBRACKET

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  68
                     boom_args shift  165

State 11:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_def ::= exp COLON SYM LPAREN * maybe_argcount RPAREN
     (42) maybe_argcount ::= *
          maybe_argcount ::= * exp
          maybe_argcount ::= * exp COMMA exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  61
                maybe_argcount shift  120
                     {default} reduce 42

State 12:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_list ::= special_list COMMA * special_def
          special_def ::= * exp COLON SYM LPAREN maybe_argcount RPAREN
          special_def ::= * exp COLON SYMNUM LPAREN maybe_argcount RPAREN

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  66
                   special_def shift  138

State 13:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_def ::= exp COLON SYMNUM LPAREN * maybe_argcount RPAREN
     (42) maybe_argcount ::= *
          maybe_argcount ::= * exp
          maybe_argcount ::= * exp COMMA exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  61
                maybe_argcount shift  109
                     {default} reduce 42

State 14:
          enum_statement ::= enum_open * enum_list RBRACE
     (32) enum_list ::= *
          enum_list ::= * single_enum
          enum_list ::= * single_enum COMMA enum_list
          single_enum ::= * SYM
          single_enum ::= * SYM EQUALS exp

                           SYM shift  116
                     enum_list shift  111
                   single_enum shift  113
                     {default} reduce 32

State 15:
     (32) enum_list ::= *
          enum_list ::= * single_enum
          enum_list ::= * single_enum COMMA enum_list
          enum_list ::= single_enum COMMA * enum_list
          single_enum ::= * SYM
          single_enum ::= * SYM EQUALS exp

                           SYM shift  116
                     enum_list shift  131
                   single_enum shift  113
                     {default} reduce 32

State 16:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA exp COMMA * exp
          special_args ::= exp COMMA exp COMMA * exp COMMA exp
          special_args ::= exp COMMA exp COMMA * exp COMMA exp COMMA exp
          special_args ::= exp COMMA exp COMMA * TAG
          special_args ::= exp COMMA exp COMMA * TAG COMMA exp
          special_args ::= exp COMMA exp COMMA * TAG COMMA exp COMMA exp
          special_args ::= exp COMMA exp COMMA * exp COMMA TAG
          special_args ::= exp COMMA exp COMMA * exp COMMA TAG COMMA exp
          special_args ::= exp COMMA exp COMMA * exp COMMA exp COMMA TAG

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           TAG shift  121
                           exp shift  73

State 17:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= TAG COMMA * exp
          special_args ::= TAG COMMA * exp COMMA exp
          special_args ::= TAG COMMA * exp COMMA exp COMMA exp
          special_args ::= TAG COMMA * exp COMMA exp COMMA exp COMMA exp
          special_args ::= TAG COMMA * TAG
          special_args ::= TAG COMMA * TAG COMMA exp
          special_args ::= TAG COMMA * TAG COMMA exp COMMA exp
          special_args ::= TAG COMMA * TAG COMMA exp COMMA exp COMMA exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           TAG shift  112
                           exp shift  58

State 18:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA * exp
          special_args ::= exp COMMA * exp COMMA exp
          special_args ::= exp COMMA * exp COMMA exp COMMA exp
          special_args ::= exp COMMA * exp COMMA exp COMMA exp COMMA exp
          special_args ::= exp COMMA * TAG
          special_args ::= exp COMMA * TAG COMMA exp
          special_args ::= exp COMMA * TAG COMMA exp COMMA exp
          special_args ::= exp COMMA * TAG COMMA exp COMMA exp COMMA exp
          special_args ::= exp COMMA * exp COMMA TAG
          special_args ::= exp COMMA * exp COMMA TAG COMMA exp
          special_args ::= exp COMMA * exp COMMA TAG COMMA exp COMMA exp
          special_args ::= exp COMMA * exp COMMA exp COMMA TAG
          special_args ::= exp COMMA * exp COMMA exp COMMA TAG COMMA exp
          special_args ::= exp COMMA * exp COMMA exp COMMA exp COMMA TAG

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           TAG shift  118
                           exp shift  75

State 19:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          linetype_declaration ::= exp EQUALS exp COMMA * exp LPAREN special_args RPAREN
          linetype_declaration ::= exp EQUALS exp COMMA * SYM LPAREN special_args RPAREN

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           SYM shift  105
                           exp shift  79

State 20:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA exp COMMA exp COMMA * exp
          special_args ::= exp COMMA exp COMMA exp COMMA * exp COMMA exp
          special_args ::= exp COMMA exp COMMA exp COMMA * TAG
          special_args ::= exp COMMA exp COMMA exp COMMA * TAG COMMA exp
          special_args ::= exp COMMA exp COMMA exp COMMA * exp COMMA TAG

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           TAG shift  122
                           exp shift  72

State 21:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA exp COMMA exp COMMA exp COMMA * exp
          special_args ::= exp COMMA exp COMMA exp COMMA exp COMMA * TAG

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           TAG shift  155
                           exp shift  85

State 22:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          boom_declaration ::= LBRACKET * exp RBRACKET LPAREN exp COMMA exp RPAREN LBRACE boom_body RBRACE

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  69

State 23:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          exp ::= LPAREN * exp RPAREN

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  70

State 24:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          linetype_declaration ::= exp EQUALS * exp COMMA exp LPAREN special_args RPAREN
          linetype_declaration ::= exp EQUALS * exp COMMA SYM LPAREN special_args RPAREN

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  82

State 25:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          define_statement ::= DEFINE SYM LPAREN * exp RPAREN

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  81

State 26:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          list_val ::= exp COLON * exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  92

State 27:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= LINEID COMMA exp COMMA exp COMMA exp COMMA * exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  83

State 28:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= exp MULTIPLY * exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  162

State 29:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= LINEID COMMA exp COMMA exp COMMA * exp
          special_args ::= LINEID COMMA exp COMMA exp COMMA * exp COMMA exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  78

State 30:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= MINUS * exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  158

State 31:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= LINEID COMMA exp COMMA * exp
          special_args ::= LINEID COMMA exp COMMA * exp COMMA exp
          special_args ::= LINEID COMMA exp COMMA * exp COMMA exp COMMA exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  76

State 32:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= exp XOR * exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  95

State 33:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= LINEID COMMA * exp
          special_args ::= LINEID COMMA * exp COMMA exp
          special_args ::= LINEID COMMA * exp COMMA exp COMMA exp
          special_args ::= LINEID COMMA * exp COMMA exp COMMA exp COMMA exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  71

State 34:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          boom_declaration ::= LBRACKET exp RBRACKET LPAREN exp COMMA * exp RPAREN LBRACE boom_body RBRACE

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  64

State 35:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= exp AND * exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  96

State 36:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          maybe_argcount ::= exp COMMA * exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  86

State 37:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= TAG COMMA TAG COMMA exp COMMA exp COMMA * exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  84

State 38:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= TAG COMMA TAG COMMA exp COMMA * exp
          special_args ::= TAG COMMA TAG COMMA exp COMMA * exp COMMA exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  74

State 39:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= TAG COMMA TAG COMMA * exp
          special_args ::= TAG COMMA TAG COMMA * exp COMMA exp
          special_args ::= TAG COMMA TAG COMMA * exp COMMA exp COMMA exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  67

State 40:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA exp COMMA exp COMMA TAG COMMA * exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  87

State 41:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= exp OR * exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  94

State 42:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= exp PLUS * exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  99

State 43:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA exp COMMA TAG COMMA * exp
          special_args ::= exp COMMA exp COMMA TAG COMMA * exp COMMA exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  63

State 44:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= TAG COMMA exp COMMA exp COMMA exp COMMA * exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  89

State 45:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA exp COMMA TAG COMMA exp COMMA * exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  90

State 46:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= TAG COMMA exp COMMA exp COMMA * exp
          special_args ::= TAG COMMA exp COMMA exp COMMA * exp COMMA exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  62

State 47:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= TAG COMMA exp COMMA * exp
          special_args ::= TAG COMMA exp COMMA * exp COMMA exp
          special_args ::= TAG COMMA exp COMMA * exp COMMA exp COMMA exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  60

State 48:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA TAG COMMA * exp
          special_args ::= exp COMMA TAG COMMA * exp COMMA exp
          special_args ::= exp COMMA TAG COMMA * exp COMMA exp COMMA exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  57

State 49:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          boom_declaration ::= LBRACKET exp RBRACKET LPAREN * exp COMMA exp RPAREN LBRACE boom_body RBRACE

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  59

State 50:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA TAG COMMA exp COMMA * exp
          special_args ::= exp COMMA TAG COMMA exp COMMA * exp COMMA exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  56

State 51:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= exp DIVIDE * exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  159

State 52:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= exp MINUS * exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  98

State 53:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          special_args ::= exp COMMA TAG COMMA exp COMMA exp COMMA * exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  93

State 54:
          exp ::= * NUM
          exp ::= * SYMNUM
          exp ::= * exp PLUS exp
          exp ::= * exp MINUS exp
          exp ::= * exp MULTIPLY exp
          exp ::= * exp DIVIDE exp
          exp ::= * exp OR exp
          exp ::= * exp AND exp
          exp ::= * exp XOR exp
          exp ::= * MINUS exp
          exp ::= * LPAREN exp RPAREN
          single_enum ::= SYM EQUALS * exp

                         MINUS shift  30
                           NUM shift  156
                        SYMNUM shift  151
                        LPAREN shift  23
                           exp shift  91

State 55:
          boom_line ::= boom_selector * boom_op boom_args
          boom_op ::= * EQUALS
          boom_op ::= * OR_EQUAL

                        EQUALS shift  166
                      OR_EQUAL shift  167
                       boom_op shift  10

State 56:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (85) special_args ::= exp COMMA TAG COMMA exp COMMA exp *
          special_args ::= exp COMMA TAG COMMA exp COMMA exp * COMMA exp

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  53
                     {default} reduce 85

State 57:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (84) special_args ::= exp COMMA TAG COMMA exp *
          special_args ::= exp COMMA TAG COMMA exp * COMMA exp
          special_args ::= exp COMMA TAG COMMA exp * COMMA exp COMMA exp

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  50
                     {default} reduce 84

State 58:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (65) special_args ::= TAG COMMA exp *
          special_args ::= TAG COMMA exp * COMMA exp
          special_args ::= TAG COMMA exp * COMMA exp COMMA exp
          special_args ::= TAG COMMA exp * COMMA exp COMMA exp COMMA exp

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  47
                     {default} reduce 65

State 59:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          boom_declaration ::= LBRACKET exp RBRACKET LPAREN exp * COMMA exp RPAREN LBRACE boom_body RBRACE

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  34

State 60:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (66) special_args ::= TAG COMMA exp COMMA exp *
          special_args ::= TAG COMMA exp COMMA exp * COMMA exp
          special_args ::= TAG COMMA exp COMMA exp * COMMA exp COMMA exp

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  46
                     {default} reduce 66

State 61:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (43) maybe_argcount ::= exp *
          maybe_argcount ::= exp * COMMA exp

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  36
                     {default} reduce 43

State 62:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (67) special_args ::= TAG COMMA exp COMMA exp COMMA exp *
          special_args ::= TAG COMMA exp COMMA exp COMMA exp * COMMA exp

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  44
                     {default} reduce 67

State 63:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (88) special_args ::= exp COMMA exp COMMA TAG COMMA exp *
          special_args ::= exp COMMA exp COMMA TAG COMMA exp * COMMA exp

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  45
                     {default} reduce 88

State 64:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          boom_declaration ::= LBRACKET exp RBRACKET LPAREN exp COMMA exp * RPAREN LBRACE boom_body RBRACE

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                        RPAREN shift  125

State 65:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          linetype_declaration ::= exp * EQUALS exp COMMA exp LPAREN special_args RPAREN
          linetype_declaration ::= exp * EQUALS exp COMMA SYM LPAREN special_args RPAREN

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                        EQUALS shift  24

State 66:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          special_def ::= exp * COLON SYM LPAREN maybe_argcount RPAREN
          special_def ::= exp * COLON SYMNUM LPAREN maybe_argcount RPAREN

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COLON shift  97

State 67:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (70) special_args ::= TAG COMMA TAG COMMA exp *
          special_args ::= TAG COMMA TAG COMMA exp * COMMA exp
          special_args ::= TAG COMMA TAG COMMA exp * COMMA exp COMMA exp

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  38
                     {default} reduce 70

State 68:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (58) boom_args ::= exp *
          boom_args ::= exp * LBRACKET arg_list RBRACKET

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                      LBRACKET shift  6
                     {default} reduce 58

State 69:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          boom_declaration ::= LBRACKET exp * RBRACKET LPAREN exp COMMA exp RPAREN LBRACE boom_body RBRACE

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                      RBRACKET shift  123

State 70:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          exp ::= LPAREN exp * RPAREN

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                        RPAREN shift  157

State 71:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (74) special_args ::= LINEID COMMA exp *
          special_args ::= LINEID COMMA exp * COMMA exp
          special_args ::= LINEID COMMA exp * COMMA exp COMMA exp
          special_args ::= LINEID COMMA exp * COMMA exp COMMA exp COMMA exp

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  31
                     {default} reduce 74

State 72:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (81) special_args ::= exp COMMA exp COMMA exp COMMA exp *
          special_args ::= exp COMMA exp COMMA exp COMMA exp * COMMA exp
          special_args ::= exp COMMA exp COMMA exp COMMA exp * COMMA TAG

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  21
                     {default} reduce 81

State 73:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (80) special_args ::= exp COMMA exp COMMA exp *
          special_args ::= exp COMMA exp COMMA exp * COMMA exp
          special_args ::= exp COMMA exp COMMA exp * COMMA exp COMMA exp
          special_args ::= exp COMMA exp COMMA exp * COMMA TAG
          special_args ::= exp COMMA exp COMMA exp * COMMA TAG COMMA exp
          special_args ::= exp COMMA exp COMMA exp * COMMA exp COMMA TAG

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  20
                     {default} reduce 80

State 74:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (71) special_args ::= TAG COMMA TAG COMMA exp COMMA exp *
          special_args ::= TAG COMMA TAG COMMA exp COMMA exp * COMMA exp

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  37
                     {default} reduce 71

State 75:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (79) special_args ::= exp COMMA exp *
          special_args ::= exp COMMA exp * COMMA exp
          special_args ::= exp COMMA exp * COMMA exp COMMA exp
          special_args ::= exp COMMA exp * COMMA exp COMMA exp COMMA exp
          special_args ::= exp COMMA exp * COMMA TAG
          special_args ::= exp COMMA exp * COMMA TAG COMMA exp
          special_args ::= exp COMMA exp * COMMA TAG COMMA exp COMMA exp
          special_args ::= exp COMMA exp * COMMA exp COMMA TAG
          special_args ::= exp COMMA exp * COMMA exp COMMA TAG COMMA exp
          special_args ::= exp COMMA exp * COMMA exp COMMA exp COMMA TAG

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  16
                     {default} reduce 79

State 76:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (75) special_args ::= LINEID COMMA exp COMMA exp *
          special_args ::= LINEID COMMA exp COMMA exp * COMMA exp
          special_args ::= LINEID COMMA exp COMMA exp * COMMA exp COMMA exp

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  29
                     {default} reduce 75

State 77:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (78) special_args ::= exp *
          special_args ::= exp * COMMA exp
          special_args ::= exp * COMMA exp COMMA exp
          special_args ::= exp * COMMA exp COMMA exp COMMA exp
          special_args ::= exp * COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= exp * COMMA TAG
          special_args ::= exp * COMMA TAG COMMA exp
          special_args ::= exp * COMMA TAG COMMA exp COMMA exp
          special_args ::= exp * COMMA TAG COMMA exp COMMA exp COMMA exp
          special_args ::= exp * COMMA exp COMMA TAG
          special_args ::= exp * COMMA exp COMMA TAG COMMA exp
          special_args ::= exp * COMMA exp COMMA TAG COMMA exp COMMA exp
          special_args ::= exp * COMMA exp COMMA exp COMMA TAG
          special_args ::= exp * COMMA exp COMMA exp COMMA TAG COMMA exp
          special_args ::= exp * COMMA exp COMMA exp COMMA exp COMMA TAG

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  18
                     {default} reduce 78

State 78:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (76) special_args ::= LINEID COMMA exp COMMA exp COMMA exp *
          special_args ::= LINEID COMMA exp COMMA exp COMMA exp * COMMA exp

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  27
                     {default} reduce 76

State 79:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          linetype_declaration ::= exp EQUALS exp COMMA exp * LPAREN special_args RPAREN

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                        LPAREN shift  9

State 80:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          list_val ::= exp * COLON exp

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COLON shift  26

State 81:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          define_statement ::= DEFINE SYM LPAREN exp * RPAREN

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                        RPAREN shift  135

State 82:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
          linetype_declaration ::= exp EQUALS exp * COMMA exp LPAREN special_args RPAREN
          linetype_declaration ::= exp EQUALS exp * COMMA SYM LPAREN special_args RPAREN

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                         COMMA shift  19

State 83:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (77) special_args ::= LINEID COMMA exp COMMA exp COMMA exp COMMA exp *

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 77

State 84:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (72) special_args ::= TAG COMMA TAG COMMA exp COMMA exp COMMA exp *

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 72

State 85:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (82) special_args ::= exp COMMA exp COMMA exp COMMA exp COMMA exp *

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 82

State 86:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (44) maybe_argcount ::= exp COMMA exp *

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 44

State 87:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (91) special_args ::= exp COMMA exp COMMA exp COMMA TAG COMMA exp *

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 91

State 88:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (26) print_item ::= exp *

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 26

State 89:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (68) special_args ::= TAG COMMA exp COMMA exp COMMA exp COMMA exp *

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 68

State 90:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (89) special_args ::= exp COMMA exp COMMA TAG COMMA exp COMMA exp *

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 89

State 91:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (36) single_enum ::= SYM EQUALS exp *

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 36

State 92:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (62) list_val ::= exp COLON exp *

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 62

State 93:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (86) special_args ::= exp COMMA TAG COMMA exp COMMA exp COMMA exp *

                            OR shift  41
                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 86

State 94:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
      (7) exp ::= exp OR exp *
          exp ::= exp * AND exp
          exp ::= exp * XOR exp

                           XOR shift  32
                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 7

State 95:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
      (9) exp ::= exp XOR exp *

                           AND shift  35
                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 9

State 96:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
      (8) exp ::= exp AND exp *
          exp ::= exp * XOR exp

                         MINUS shift  52
                          PLUS shift  42
                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 8

State 97:
          special_def ::= exp COLON * SYM LPAREN maybe_argcount RPAREN
          special_def ::= exp COLON * SYMNUM LPAREN maybe_argcount RPAREN

                        SYMNUM shift  115
                           SYM shift  124

State 98:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
      (4) exp ::= exp MINUS exp *
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp

                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 4

State 99:
          exp ::= exp * PLUS exp
      (3) exp ::= exp PLUS exp *
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp

                      MULTIPLY shift  28
                        DIVIDE shift  51
                     {default} reduce 3

State 100:
          special_declaration ::= SPECIAL special_list * SEMICOLON
          special_list ::= special_list * COMMA special_def

                         COMMA shift  12
                     SEMICOLON shift  136

State 101:
          boom_declaration ::= LBRACKET exp RBRACKET LPAREN exp COMMA exp RPAREN LBRACE boom_body * RBRACE

                        RBRACE shift  150

State 102:
          define_statement ::= DEFINE * SYM LPAREN exp RPAREN

                           SYM shift  103

State 103:
          define_statement ::= DEFINE SYM * LPAREN exp RPAREN

                        LPAREN shift  25

State 104:
     (23) print_list ::= print_item *
          print_list ::= print_item * COMMA print_list

                         COMMA shift  1
                     {default} reduce 23

State 105:
          linetype_declaration ::= exp EQUALS exp COMMA SYM * LPAREN special_args RPAREN

                        LPAREN shift  8

State 106:
          linetype_declaration ::= exp EQUALS exp COMMA SYM LPAREN special_args * RPAREN

                        RPAREN shift  153

State 107:
          boom_args ::= exp LBRACKET arg_list * RBRACKET

                      RBRACKET shift  161

State 108:
          include_statement ::= INCLUDE * STRING

                        STRING shift  133

State 109:
          special_def ::= exp COLON SYMNUM LPAREN maybe_argcount * RPAREN

                        RPAREN shift  134

State 110:
          print_statement ::= PRINT LPAREN print_list * RPAREN

                        RPAREN shift  142

State 111:
          enum_statement ::= enum_open enum_list * RBRACE

                        RBRACE shift  132

State 112:
     (69) special_args ::= TAG COMMA TAG *
          special_args ::= TAG COMMA TAG * COMMA exp
          special_args ::= TAG COMMA TAG * COMMA exp COMMA exp
          special_args ::= TAG COMMA TAG * COMMA exp COMMA exp COMMA exp

                         COMMA shift  39
                     {default} reduce 69

State 113:
     (33) enum_list ::= single_enum *
          enum_list ::= single_enum * COMMA enum_list

                         COMMA shift  15
                     {default} reduce 33

State 114:
     (64) special_args ::= TAG *
          special_args ::= TAG * COMMA exp
          special_args ::= TAG * COMMA exp COMMA exp
          special_args ::= TAG * COMMA exp COMMA exp COMMA exp
          special_args ::= TAG * COMMA exp COMMA exp COMMA exp COMMA exp
          special_args ::= TAG * COMMA TAG
          special_args ::= TAG * COMMA TAG COMMA exp
          special_args ::= TAG * COMMA TAG COMMA exp COMMA exp
          special_args ::= TAG * COMMA TAG COMMA exp COMMA exp COMMA exp

                         COMMA shift  17
                     {default} reduce 64

State 115:
          special_def ::= exp COLON SYMNUM * LPAREN maybe_argcount RPAREN

                        LPAREN shift  13

State 116:
     (35) single_enum ::= SYM *
          single_enum ::= SYM * EQUALS exp

                        EQUALS shift  54
                     {default} reduce 35

State 117:
          linetype_declaration ::= exp EQUALS exp COMMA exp LPAREN special_args * RPAREN

                        RPAREN shift  154

State 118:
     (83) special_args ::= exp COMMA TAG *
          special_args ::= exp COMMA TAG * COMMA exp
          special_args ::= exp COMMA TAG * COMMA exp COMMA exp
          special_args ::= exp COMMA TAG * COMMA exp COMMA exp COMMA exp

                         COMMA shift  48
                     {default} reduce 83

State 119:
          enum_open ::= ENUM * LBRACE

                        LBRACE shift  129

State 120:
          special_def ::= exp COLON SYM LPAREN maybe_argcount * RPAREN

                        RPAREN shift  130

State 121:
     (87) special_args ::= exp COMMA exp COMMA TAG *
          special_args ::= exp COMMA exp COMMA TAG * COMMA exp
          special_args ::= exp COMMA exp COMMA TAG * COMMA exp COMMA exp

                         COMMA shift  43
                     {default} reduce 87

State 122:
     (90) special_args ::= exp COMMA exp COMMA exp COMMA TAG *
          special_args ::= exp COMMA exp COMMA exp COMMA TAG * COMMA exp

                         COMMA shift  40
                     {default} reduce 90

State 123:
          boom_declaration ::= LBRACKET exp RBRACKET * LPAREN exp COMMA exp RPAREN LBRACE boom_body RBRACE

                        LPAREN shift  49

State 124:
          special_def ::= exp COLON SYM * LPAREN maybe_argcount RPAREN

                        LPAREN shift  11

State 125:
          boom_declaration ::= LBRACKET exp RBRACKET LPAREN exp COMMA exp RPAREN * LBRACE boom_body RBRACE

                        LBRACE shift  3

State 126:
     (73) special_args ::= LINEID *
          special_args ::= LINEID * COMMA exp
          special_args ::= LINEID * COMMA exp COMMA exp
          special_args ::= LINEID * COMMA exp COMMA exp COMMA exp
          special_args ::= LINEID * COMMA exp COMMA exp COMMA exp COMMA exp

                         COMMA shift  33
                     {default} reduce 73

State 127:
          print_statement ::= PRINT * LPAREN print_list RPAREN

                        LPAREN shift  2

State 128:
     (60) arg_list ::= list_val *
          arg_list ::= list_val * COMMA arg_list

                         COMMA shift  7
                     {default} reduce 60

State 129:
     (31) enum_open ::= ENUM LBRACE *

                     {default} reduce 31

State 130:
     (40) special_def ::= exp COLON SYM LPAREN maybe_argcount RPAREN *

                     {default} reduce 40

State 131:
     (34) enum_list ::= single_enum COMMA enum_list *

                     {default} reduce 34

State 132:
     (30) enum_statement ::= enum_open enum_list RBRACE *

                     {default} reduce 30

State 133:
     (29) include_statement ::= INCLUDE STRING *

                     {default} reduce 29

State 134:
     (41) special_def ::= exp COLON SYMNUM LPAREN maybe_argcount RPAREN *

                     {default} reduce 41

State 135:
     (28) define_statement ::= DEFINE SYM LPAREN exp RPAREN *

                     {default} reduce 28

State 136:
     (37) special_declaration ::= SPECIAL special_list SEMICOLON *

                     {default} reduce 37

State 137:
     (27) print_item ::= ENDL *

                     {default} reduce 27

State 138:
     (39) special_list ::= special_list COMMA special_def *

                     {default} reduce 39

State 139:
     (38) special_list ::= special_def *

                     {default} reduce 38

State 140:
     (25) print_item ::= STRING *

                     {default} reduce 25

State 141:
     (24) print_list ::= print_item COMMA print_list *

                     {default} reduce 24

State 142:
     (21) print_statement ::= PRINT LPAREN print_list RPAREN *

                     {default} reduce 21

State 143:
     (20) external_declaration ::= special_declaration *

                     {default} reduce 20

State 144:
     (19) external_declaration ::= boom_declaration *

                     {default} reduce 19

State 145:
     (18) external_declaration ::= linetype_declaration *

                     {default} reduce 18

State 146:
     (17) external_declaration ::= enum_statement *

                     {default} reduce 17

State 147:
     (16) external_declaration ::= print_statement *

                     {default} reduce 16

State 148:
     (15) external_declaration ::= include_statement *

                     {default} reduce 15

State 149:
     (14) external_declaration ::= define_statement *

                     {default} reduce 14

State 150:
     (47) boom_declaration ::= LBRACKET exp RBRACKET LPAREN exp COMMA exp RPAREN LBRACE boom_body RBRACE *

                     {default} reduce 47

State 151:
      (2) exp ::= SYMNUM *

                     {default} reduce 2

State 152:
     (49) boom_body ::= boom_line boom_body *

                     {default} reduce 49

State 153:
     (46) linetype_declaration ::= exp EQUALS exp COMMA SYM LPAREN special_args RPAREN *

                     {default} reduce 46

State 154:
     (45) linetype_declaration ::= exp EQUALS exp COMMA exp LPAREN special_args RPAREN *

                     {default} reduce 45

State 155:
     (92) special_args ::= exp COMMA exp COMMA exp COMMA exp COMMA TAG *

                     {default} reduce 92

State 156:
      (1) exp ::= NUM *

                     {default} reduce 1

State 157:
     (11) exp ::= LPAREN exp RPAREN *

                     {default} reduce 11

State 158:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp
     (10) exp ::= MINUS exp *

                     {default} reduce 10

State 159:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
          exp ::= exp * DIVIDE exp
      (6) exp ::= exp DIVIDE exp *
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp

                     {default} reduce 6

State 160:
     (13) translation_unit ::= external_declaration *

                     {default} reduce 13

State 161:
     (59) boom_args ::= exp LBRACKET arg_list RBRACKET *

                     {default} reduce 59

State 162:
          exp ::= exp * PLUS exp
          exp ::= exp * MINUS exp
          exp ::= exp * MULTIPLY exp
      (5) exp ::= exp MULTIPLY exp *
          exp ::= exp * DIVIDE exp
          exp ::= exp * OR exp
          exp ::= exp * AND exp
          exp ::= exp * XOR exp

                     {default} reduce 5

State 163:
      (0) main ::= translation_unit *

                     {default} reduce 0

State 164:
     (61) arg_list ::= list_val COMMA arg_list *

                     {default} reduce 61

State 165:
     (50) boom_line ::= boom_selector boom_op boom_args *

                     {default} reduce 50

State 166:
     (56) boom_op ::= EQUALS *

                     {default} reduce 56

State 167:
     (57) boom_op ::= OR_EQUAL *

                     {default} reduce 57

State 168:
     (51) boom_selector ::= FLAGS *

                     {default} reduce 51

State 169:
     (52) boom_selector ::= ARG2 *

                     {default} reduce 52

State 170:
     (53) boom_selector ::= ARG3 *

                     {default} reduce 53

State 171:
     (54) boom_selector ::= ARG4 *

                     {default} reduce 54

State 172:
     (55) boom_selector ::= ARG5 *

                     {default} reduce 55

